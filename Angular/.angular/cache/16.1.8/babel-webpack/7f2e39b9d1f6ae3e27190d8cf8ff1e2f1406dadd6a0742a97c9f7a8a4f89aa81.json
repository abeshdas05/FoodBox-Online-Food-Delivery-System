{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FoodBoxService {\n  changeAdminPassword(oldPassword, newPassword) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:8084\";\n    this.userId = 1;\n  }\n  getCartItems() {\n    return this.http.get(`${this.baseUrl}/cart/${this.userId}`);\n  }\n  getFoodItems() {\n    return this.http.get(`${this.baseUrl}/foodItems`);\n  }\n  getFoodItemsByCategory(categoryId) {\n    return this.http.get(`${this.baseUrl}/foodItems/${categoryId}`);\n    ;\n  }\n  addFoodItem(categoryId, newFoodItem) {\n    return this.http.post(`${this.baseUrl}/foodItems/${categoryId}`, newFoodItem, {\n      responseType: 'text'\n    });\n  }\n  editFoodItem(foodItem) {\n    return this.http.put(`${this.baseUrl}/foodItems`, foodItem, {\n      responseType: 'text'\n    });\n  }\n  deleteFoodItem(foodItemId) {\n    return this.http.delete(`${this.baseUrl}/foodItems/delete/${foodItemId}`, {\n      responseType: 'text'\n    });\n    ;\n  }\n  getCategories() {\n    return this.http.get(`${this.baseUrl}/category`);\n  }\n  getCategoryById(categoryId) {\n    return this.http.get(`${this.baseUrl}/category/${categoryId}`);\n  }\n  addCategory(categoryName) {\n    return this.http.post(`${this.baseUrl}/category/add/${categoryName}`, null, {\n      responseType: 'text'\n    });\n  }\n  deleteCategory(categoryId) {\n    return this.http.delete(`${this.baseUrl}/category/delete/${categoryId}`, {\n      responseType: 'text'\n    });\n  }\n  addToCart(foodItemId, quantity) {\n    return this.http.post(`${this.baseUrl}/cart/add?userId=${this.userId}&foodItemId=${foodItemId}&quantity=${quantity}`, null, {\n      responseType: 'text'\n    });\n  }\n  updateCartItemQuantity(cartItem, newQuantity) {\n    return this.http.put(`${this.baseUrl}/cart/update/${cartItem.cartItemId}/${newQuantity}`, null, {\n      responseType: 'text'\n    });\n  }\n  removeFromCart(cartItem) {\n    return this.http.delete(`${this.baseUrl}/cart/delete/${cartItem.cartItemId}`, {\n      responseType: 'text'\n    });\n  }\n  registerAdmin(admin) {\n    return this.http.post(`${this.baseUrl}/admin/register`, admin, {\n      responseType: 'text'\n    });\n  }\n  adminLogin(adminCreds) {\n    return this.http.post(`${this.baseUrl}/admin/login`, adminCreds, {\n      responseType: 'text'\n    });\n  }\n  getAdminByEmployeeId(adminEmployeeId) {\n    return this.http.get(`${this.baseUrl}/admin/employeeId/${adminEmployeeId}`);\n  }\n  updateAdmin(admin) {\n    return this.http.put(`${this.baseUrl}/admin/update`, admin, {\n      responseType: 'text'\n    });\n  }\n}\n_class = FoodBoxService;\n_class.ɵfac = function FoodBoxService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["FoodBoxService","changeAdminPassword","oldPassword","newPassword","Error","constructor","http","baseUrl","userId","getCartItems","get","getFoodItems","getFoodItemsByCategory","categoryId","addFoodItem","newFoodItem","post","responseType","editFoodItem","foodItem","put","deleteFoodItem","foodItemId","delete","getCategories","getCategoryById","addCategory","categoryName","deleteCategory","addToCart","quantity","updateCartItemQuantity","cartItem","newQuantity","cartItemId","removeFromCart","registerAdmin","admin","adminLogin","adminCreds","getAdminByEmployeeId","adminEmployeeId","updateAdmin","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["F:\\PP\\RLL\\FoodBox\\src\\app\\food-box.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CartItem } from './model-classes/cart-item.model';\nimport { Observable } from 'rxjs';\nimport { FoodItem } from './model-classes/food-item.model';\nimport { Category } from './model-classes/category.model';\nimport { Admin } from './model-classes/admin.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FoodBoxService {\n  changeAdminPassword(oldPassword: string, newPassword: string) {\n    throw new Error('Method not implemented.');\n  }\n  private baseUrl = \"http://localhost:8084\";\n  constructor(private http: HttpClient) { }\n  private userId = 1;\n  getCartItems(): Observable<CartItem[]> {\n    return this.http.get<CartItem[]>(`${this.baseUrl}/cart/${this.userId}`);\n  }\n\n  getFoodItems(): Observable<FoodItem[]> {\n    return this.http.get<FoodItem[]>(`${this.baseUrl}/foodItems`);\n  }\n  getFoodItemsByCategory(categoryId: number): Observable<FoodItem[]> {\n    return this.http.get<FoodItem[]>(`${this.baseUrl}/foodItems/${categoryId}`);;\n  }\n  addFoodItem(categoryId: number, newFoodItem: FoodItem) {\n    return this.http.post(`${this.baseUrl}/foodItems/${categoryId}`, newFoodItem, { responseType: 'text' });\n  }\n  editFoodItem(foodItem: FoodItem): Observable<string> {\n    return this.http.put(`${this.baseUrl}/foodItems`, foodItem, { responseType: 'text' });\n  }\n  deleteFoodItem(foodItemId: number): Observable<string> {\n    return this.http.delete(`${this.baseUrl}/foodItems/delete/${foodItemId}`, { responseType: 'text' });;\n  }\n  getCategories(): Observable<Category[]> {\n    return this.http.get<Category[]>(`${this.baseUrl}/category`);\n  }\n  getCategoryById(categoryId: number): Observable<Category> {\n    return this.http.get<Category>(`${this.baseUrl}/category/${categoryId}`);\n  }\n  addCategory(categoryName: string): Observable<string> {\n    return this.http.post(`${this.baseUrl}/category/add/${categoryName}`, null, { responseType: 'text' });\n  }\n  deleteCategory(categoryId: number): Observable<string> {\n    return this.http.delete(`${this.baseUrl}/category/delete/${categoryId}`, { responseType: 'text' });\n  }\n\n  addToCart(foodItemId: number, quantity: number): Observable<string> {\n    return this.http.post(`${this.baseUrl}/cart/add?userId=${this.userId}&foodItemId=${foodItemId}&quantity=${quantity}`, null, { responseType: 'text' });\n  }\n  updateCartItemQuantity(cartItem: CartItem, newQuantity: number): Observable<string> {\n    return this.http.put(`${this.baseUrl}/cart/update/${cartItem.cartItemId}/${newQuantity}`, null, { responseType: 'text' });\n  }\n\n  removeFromCart(cartItem: CartItem): Observable<string> {\n    return this.http.delete(`${this.baseUrl}/cart/delete/${cartItem.cartItemId}`, { responseType: 'text' })\n  }\n\n\n  registerAdmin(admin: any): Observable<string> {\n    return this.http.post(`${this.baseUrl}/admin/register`, admin, { responseType: 'text' });\n  }\n\n  adminLogin(adminCreds: any): Observable<string> {\n    return this.http.post(`${this.baseUrl}/admin/login`, adminCreds, { responseType: 'text' });\n  }\n  getAdminByEmployeeId(adminEmployeeId:string):Observable<Admin>{\n    return this.http.get<Admin>(`${this.baseUrl}/admin/employeeId/${adminEmployeeId}`);\n  }\n  updateAdmin(admin:Admin):Observable<string>{\n    return this.http.put(`${this.baseUrl}/admin/update`, admin, { responseType: 'text' });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}